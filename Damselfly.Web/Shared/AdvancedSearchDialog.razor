
@using System.ComponentModel.DataAnnotations
@using Damselfly.Core.Interfaces

@inject BasketService basketService
@inject UserService userService
@inject UserStatusService userStatusService
@inject StatusService statusService
@inject ConfigService configService
@inject IndexingService indexingService
@inject SearchService searchService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Advanced Search</MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="@Query" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />

            <MudTextField @bind-Value="@Query.SearchText" Label="Search Text" Variant="Variant.Filled" />

            <MudCheckBox @bind-Checked="@Query.IncludeAITags" Label="Include AI tags when searching" />

            <!-- Add Search text, date, tag, person etc etc -->
            <MudSelect T="int" Label="Camera" HelperText="Camera Model to filter" @bind-Value="Query.CameraId" Variant="Variant.Filled">
                <MudSelectItem T="int" Value="-1">Any Camera</MudSelectItem>
                @foreach (var cam in indexingService.Cameras)
                {
                    <MudSelectItem T="int" Value="@cam.CameraId">
                        @cam.Make @cam.Model
                    </MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="int" Label="Lens" HelperText="Lens Model to filter" @bind-Value="Query.LensId" Variant="Variant.Filled">
                <MudSelectItem T="int" Value="-1">Any Lens</MudSelectItem>
                @foreach (var lens in indexingService.Lenses)
                {
                    <MudSelectItem T="int" Value="@lens.LensId">
                        @lens.Make @lens.Model
                    </MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="ulong" Label="Max File Size" HelperText="Max File Size" @bind-Value="Query.MaxSizeKB" Variant="Variant.Filled">
                <MudSelectItem T="ulong" Value="0">Any Size</MudSelectItem>
                @foreach (var choice in fileSizeChoices)
                {
                    <MudSelectItem T="ulong" Value="@choice.Value">
                        @choice.Key
                    </MudSelectItem>
                }
            </MudSelect>

            <MudSelect T="ulong" Label="Min File Size" HelperText="Min File Size" @bind-Value="Query.MinSizeKB" Variant="Variant.Filled">
                <MudSelectItem T="ulong" Value="0">Any Size</MudSelectItem>
                @foreach (var choice in fileSizeChoices)
                {
                    <MudSelectItem T="ulong" Value="@choice.Value">
                        @choice.Key
                    </MudSelectItem>
                }
            </MudSelect>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Close</MudButton>
        <MudButton Color="Color.Primary" OnClick="Search">Search</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public SearchQuery InputQuery { get; set; }

    private SearchQuery Query = new SearchQuery();

    private List<KeyValuePair<string, ulong>> fileSizeChoices = new List<KeyValuePair<string, ulong>> {
        new KeyValuePair<string, ulong>( "1KB", 1024 ),
        new KeyValuePair<string, ulong>( "50KB", 50 * 1024 ),
        new KeyValuePair<string, ulong>( "500KB", 500 * 1024 ),
        new KeyValuePair<string, ulong>( "1MB", 1024 * 1024 ),
        new KeyValuePair<string, ulong>( "5MB", 5 * 1024 * 1024 ),
        new KeyValuePair<string, ulong>( "10MB", 10 * 1024 * 1024 ),
        new KeyValuePair<string, ulong>( "50MB", 50 * 1024 * 1024 ),
    };


    private async Task OnValidSubmit(EditContext context)
    {
        await Search();
    }


    public async Task Search()
    {
        var db = new ImageContext();

        try
        {
            searchService.ApplyQuery(Query);

            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            Logging.LogError($"Unexpected error saving basket details: {ex}");
            DisplayError($"Unexpected error saving basket {ex.Message}");
        }
    }

    private string errorMsg;

    private void DisplayError(string errorText)
    {
        errorMsg = errorText;
        StateHasChanged();
    }

    void Cancel() => MudDialog.Cancel();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        InputQuery.CopyPropertiesTo(Query);
    }
}