
@using System.ComponentModel.DataAnnotations
@using Damselfly.Core.Interfaces

@inject BasketService basketService
@inject UserService userService
@inject UserStatusService userStatusService
@inject StatusService statusService
@inject ConfigService configService
@inject IndexingService indexingService
@inject SearchService searchService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Advanced Search</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@Query.SearchText" Label="Search Text" Variant="Variant.Filled" />

        <MudCheckBox @bind-Checked="@Query.UntaggedImages" Label="Only show images with no keyword tags" />
        <MudCheckBox @bind-Checked="@Query.TagsOnly" Label="Exclude filename/folder from text search" />
        <MudCheckBox @bind-Checked="@Query.IncludeAITags" Label="Include AI tags when searching" />

        <!-- Add Search text, date, tag, person etc etc -->
        <MudSelect T="int" Label="Camera" HelperText="Camera Model to filter" @bind-Value="Query.CameraId" Variant="Variant.Filled">
            <MudSelectItem T="int" Value="-1">Any Camera</MudSelectItem>
            @foreach (var cam in indexingService.Cameras)
            {
                <MudSelectItem T="int" Value="@cam.CameraId">
                    @cam.Make @cam.Model
                </MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="int" Label="Lens" HelperText="Lens Model to filter" @bind-Value="Query.LensId" Variant="Variant.Filled">
            <MudSelectItem T="int" Value="-1">Any Lens</MudSelectItem>
            @foreach (var lens in indexingService.Lenses)
            {
                <MudSelectItem T="int" Value="@lens.LensId">
                    @lens.Make @lens.Model
                </MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="int?" Label="Max File Size" HelperText="Max File Size" @bind-Value="Query.MaxSizeKB" Variant="Variant.Filled">
            <MudSelectItem T="int?" Value="@null">Any Size</MudSelectItem>
            @foreach (var choice in fileSizeChoices)
            {
                <MudSelectItem T="int?" Value="@choice.Value">
                    @choice.Key
                </MudSelectItem>
            }
        </MudSelect>

        <MudSelect T="int?" Label="Min File Size" HelperText="Min File Size" @bind-Value="Query.MinSizeKB" Variant="Variant.Filled">
            <MudSelectItem T="int?" Value="@null">Any Size</MudSelectItem>
            @foreach (var choice in fileSizeChoices)
            {
                <MudSelectItem T="int?" Value="@choice.Value">
                    @choice.Key
                </MudSelectItem>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudItem xs="12" md="12">
            <MudPaper Elevation="0" Class="d-flex py-2 px-1">
                <MudButton Class="pa-2 ml-2 mr-auto" Color="Color.Warning" OnClick="ResetSearch">Reset</MudButton>
                <MudButton Class="pa-2 mx-2" OnClick="Cancel">Cancel</MudButton>
                <MudButton Class="pa-2 mx-2" Color="Color.Primary" OnClick="Search">Search</MudButton>
            </MudPaper>
        </MudItem>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public SearchQuery InputQuery { get; set; }

    private SearchQuery Query = new SearchQuery();

    private List<KeyValuePair<string, int>> fileSizeChoices = new List<KeyValuePair<string, int>> {
        new KeyValuePair<string, int>( "1KB", 1 ),
        new KeyValuePair<string, int>( "50KB", 50 ),
        new KeyValuePair<string, int>( "500KB", 500 ),
        new KeyValuePair<string, int>( "1MB", 1024 ),
        new KeyValuePair<string, int>( "5MB", 5 * 1024 ),
        new KeyValuePair<string, int>( "10MB", 10 * 1024 ),
        new KeyValuePair<string, int>( "50MB", 50 * 1024 ),
    };

    private void ResetSearch()
    {
        Query = new SearchQuery();
        Search();
    }

    private void Search()
    {
        try
        {
            MudDialog.Close(DialogResult.Ok(true));

            searchService.ApplyQuery(Query);
        }
        catch (Exception ex)
        {
            Logging.LogError($"Unexpected error in search dialog: {ex}");
            DisplayError($"Unexpected error in search parameters: {ex.Message}");
        }
    }

    private string errorMsg;

    private void DisplayError(string errorText)
    {
        errorMsg = errorText;
        StateHasChanged();
    }

    void Cancel() => MudDialog.Cancel();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        InputQuery.CopyPropertiesTo(Query);
    }
}