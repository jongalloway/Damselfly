
@using Damselfly.Core.ImageProcessing

@inject ThumbnailService thumbService
@inject NavigationManager NavigationManager
@inject NavigationService navContext
@inject ContextMenuService contextMenuService
@inject BasketService basketService
@inject ImageRecognitionService aiService;
@inject SelectionService selectionService
 
@inject IJSRuntime JsRuntime

<LocalFileExporter @ref="FileExporter" />

@if (CurrentImage == null)
{
<p><em>Loading image...</em></p> }
else
{
<div class="grid-image" @ondblclick="NavigateToImage">
    @if (!string.IsNullOrEmpty(ImageUrl))
    {
        <img @key="CurrentImage.ImageId" class="@SelectStyle" title="@ImgToolTip" src="@ImageUrl"
            @oncontextmenu=@(args => ShowContextMenu(args)) @oncontextmenu:preventDefault="true">
                    <input class=" grid-checkbox damselfly-checkbox" type="checkbox" @bind="@InBasket">}
</div>
                @if (DisplayFileName)
                {
<div class="grid-text">
    @CurrentImage.FileName
</div>}}

@code
{
    [Parameter]
    public NavigationContexts NavContext { get; set; }

    [Parameter]
    public Image CurrentImage { get; set;  }

    [Parameter]
    public bool DisplayFileName { get; set; } = false;

    [Parameter]
    public ThumbSize ThumbnailSize { get; set; } = ThumbSize.Small;

    public bool InBasket
    {
        get { return basketService.IsSelected(CurrentImage); }
        set { _ = SetBasketState(value); }
    }

    private string ImgToolTip => $"{CurrentImage.FileName}\nTaken: {CurrentImage.SortDate.Display()}\nFolder: {CurrentImage.Folder.Path}";
    private LocalFileExporter FileExporter;
    string ImageUrl => $"/thumb/{ThumbnailSize}/{CurrentImage.ImageId}";
    string SelectStyle { get { return selectionService.IsSelected(CurrentImage) ? "grid-image-selected" : "grid-image-unselected"; } }

    private async Task SetBasketState( bool newState )
    {
        await basketService.SetBasketState(new[] { CurrentImage }, newState);
        // Notify the image list that the selection has changed
        StateHasChanged();
    }

    void ShowContextMenu(MouseEventArgs args)
    {
        var selectedImages = selectionService.Selection;

        contextMenuService.Open(args, ds =>
           @<RadzenMenu Click="OnMenuItemClick">
            @if (selectedImages.Count == 1)
            {
                <RadzenMenuItem Text="View Image" Value="0" />
                <RadzenMenuItem Text="Download" Value="1" />
                <hr class="separator">}
                @if (InBasket)
                {
                    <RadzenMenuItem Text="Remove from basket" Value="2" />
                }
                else
                {
                    <RadzenMenuItem Text="Add to basket" Value="3" />
                }
                @if (FileExporter != null && FileExporter.IsDesktopHosted)
                { 
                    <RadzenMenuItem Text="Save Locally" Value="4" />
                }
                <RadzenMenuItem Text="Regenerate Thumbnail" Value="5" />
                <RadzenMenuItem Text="Rescan AI" Value="6" />
            </RadzenMenu>
        );
    }

    async Task OnMenuItemClick(MenuItemEventArgs args)
    {
        contextMenuService.Close();
        switch (args.Value)
        {
            case 0: NavigateToImage(); break;
            case 1: await DownloadImage(); break;
            case 2: await basketService.SetBasketState( selectionService.Selection, false ); break;
            case 3: await basketService.SetBasketState(selectionService.Selection, true); break;
            case 4: await FileExporter.ExportImagesToLocalFilesystem(selectionService.Selection); break;
            case 5: await thumbService.MarkImagesForScan( selectionService.Selection); break;
            case 6: await aiService.MarkImagesForScan(selectionService.Selection); break;
        }
    }

    public async Task DownloadImage()
    {
        try
        {
            await JsRuntime.InvokeAsync<string>("downloadFile", CurrentImage.DownloadImageUrl);
        }
        catch (Exception ex)
        {
            Logging.LogError("Exception: " + ex.Message);
        }
    }

    void NavigateToImage()
    {
        navContext.Context = NavContext;
        NavigationManager.NavigateTo("/image/" + CurrentImage.ImageId);
    }
}
