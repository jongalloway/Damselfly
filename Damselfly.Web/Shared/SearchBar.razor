@using Damselfly.Web.Data
@using Damselfly.Core.Services;
@using BlazorDateRangePicker

@inject IDialogService DialogService
@inject SearchService searchService
@inject UserStatusService statusService

<div class="damselfly-searchbar">
    <div class="damselfly-searchfilter">
        <ConflatedTextBox IconClass="fa-search" id="searchBox" placeholder="Enter a search term" OnValueChanged="@DoSearch" TextValue="@SearchText" />
        <div class="damselfly-textsearchoptions">
            <div>
                <input id="tags" title="Search tags only (ignore filename)" type="checkbox" @bind="@searchService.TagsOnly" />
                <label for="tags" title="Search keyword tags only, not filenames"><i class="fa fa-tags" /></label>
            </div>
            <div>
                <input id="ai" title="Include AI Tags" type="checkbox" @bind="@searchService.IncludeAITags" />
                <label for="ai" title="Include auto-generated/AI tags"><i class="fa fa-brain" /></label>
            </div>
        </div>
    </div>
    <div class="damselfly-searchfilter">
        <DatePickerEx OnRangeSelect="@OnRangeSelect" StartDate="@searchService.MinDate" EndDate="@searchService.MaxDate" />
    </div>
    <div class="damselfly-searchfilter">
        <ConflatedTextBox IconClass="fa-file" placeholder="Minimum file size" OnKeyPressed="@KeyChangedMinSize" OnValueChanged="@DoSearch" TextValue="@MinSize" />
    </div>
    <button title="Advanced Search" @onclick="@(() => OpenAdvancedSearch())" class="InputAddOn-item"><i class="fas fa-search" /></button>
</div>

@code {

    public string SearchText { get { return searchService.SearchText; } }
    public string MinSize { get { return searchService.MinSizeKB.ToString(); } }

    private async Task OpenAdvancedSearch()
    {
        SearchQuery query = new SearchQuery();
        // TODO: Copy query here
        query.SearchText = SearchText;
        query.MinDate = searchService.MinDate;
        query.MaxDate = searchService.MaxDate;

        var parameters = new DialogParameters { { "InputQuery", query } };
        var dialog = DialogService.Show<AdvancedSearchDialog>("Advanced Search", parameters);
        var result = await dialog.Result;
        StateHasChanged();
    }

    public void OnRangeSelect(BlazorDateRangePicker.DateRange range)
    {
        if (range != null)
            searchService.SetDateRange(range.Start.Date, range.End.Date);
        else
            searchService.SetDateRange(null, null);
    }

    private void KeyChangedMinSize(string newText)
    {
        if (!string.IsNullOrEmpty(newText))
            statusService.StatusText = $"Searching for images larger than {newText}...";
    }

    private void DoSearch(string searchTerm)
    {
        if (!string.IsNullOrEmpty(searchTerm))
            statusService.StatusText = $"Searching for keyword: {searchTerm}...";
        searchService.SearchText = searchTerm;
    }
}
