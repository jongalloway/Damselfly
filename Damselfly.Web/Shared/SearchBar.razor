@using Damselfly.Web.Data
@using Damselfly.Core.Services;
@using BlazorDateRangePicker
@using Damselfly.Core.ImageProcessing

@inject IDialogService DialogService
@inject SearchService searchService
@inject UserStatusService statusService
@inject UserConfigService configService

<div class="damselfly-searchbar">
    <div class="damselfly-searchfilter">
        <ConflatedTextBox IconClass="fa-search" id="searchBox" placeholder="Enter a search term" OnValueChanged="@DoSearch" TextValue="@searchService.SearchText" />
    </div>
    <div class="damselfly-searchfilter">
        <DatePickerEx OnRangeSelect="@OnRangeSelect" StartDate="@searchService.MinDate" EndDate="@searchService.MaxDate" />
    </div>
    <div class="damselfly-searchhint">
        <label class="damselfly-browsetoollabel"><i class="fas fa-search" title="Current Search Parameters" />&nbsp;@searchService.SearchBreadcrumbs</label>
    </div>

    <div class="damselfly-browsetool">
        <label class="damselfly-browsetoollabel">
            Group By:
            @foreach (var choice in Enum.GetValues(typeof(SearchQuery.GroupingType)).Cast<SearchQuery.GroupingType>())
            {
                <label class="damselfly-browsetoollabel">
                    <input name="grouping" value="@choice" type="radio"
                           checked="@searchService.Grouping.Equals( choice )"
                           @onchange="@(() => { ChangeGroupType( choice ); })" />
                    @choice.ToString()
                </label>
            }
        </label>
    </div>
    <div class="damselfly-browsetools">
        <button class="damselfly-browsetool btn btn-primary" title="Advanced Search" @onclick="@(() => OpenAdvancedSearch())"><i class="fas fa-search" /></button>
        <div class="damselfly-browsetool"><i title="Small Thumbnails" class="fas fa-image" style="font-size:smaller;" @onclick="() => OnThumbSizeChanged?.Invoke(ThumbSize.Small)" /></div>
        <div class="damselfly-browsetool"><i title="Medium Thumbnails" class="fas fa-image" @onclick="() => OnThumbSizeChanged?.Invoke(ThumbSize.Medium)" /></div>
        <div class="damselfly-browsetool"><i title="Large Thumbnails" class="fas fa-image" style="font-size:larger;" @onclick="() => OnThumbSizeChanged?.Invoke(ThumbSize.Large)" /></div>
        @if (searchService.SortOrder == SearchQuery.SortOrderType.Descending)
        {
            <div class="damselfly-browsetool"><i title="Sort Ascending" class="fas fa-sort-amount-up" @onclick="() => ChangeSortOrder(SearchQuery.SortOrderType.Ascending)" /></div>
        }
        else
        {
            <div class="damselfly-browsetool"><i title="Sort Descending" class="fas fa-sort-amount-down" @onclick="() => ChangeSortOrder(SearchQuery.SortOrderType.Descending)" /></div>
        }
    </div>
</div>

@code {

    [Parameter]
    public Action<ThumbSize> OnThumbSizeChanged { get; set; }

    ThumbSize CurrentThumbSize = ThumbSize.Small;

    protected override void OnInitialized()
    {
        CurrentThumbSize = configService.Get<ThumbSize>(ConfigSettings.ThumbSize, ThumbSize.Small);
        OnThumbSizeChanged?.Invoke(CurrentThumbSize);
    }

    private async Task OpenAdvancedSearch()
    {
        var options = new MudBlazor.DialogOptions() { CloseButton = true };
        var dialog = DialogService.Show<AdvancedSearchDialog>("Advanced Search", options: options );
        var result = await dialog.Result;
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            searchService.OnChange += SearchQueryChanged;
        }
    }

    public void Dispose()
    {
        searchService.OnChange -= SearchQueryChanged;
    }

    protected void SearchQueryChanged()
    {
        _ = InvokeAsync(StateHasChanged);
    }

    public void OnRangeSelect(BlazorDateRangePicker.DateRange range)
    {
        if (range != null)
            searchService.SetDateRange(range.Start.Date, range.End.Date);
        else
            searchService.SetDateRange(null, null);
    }

    private void DoSearch(string searchTerm)
    {
        if (!string.IsNullOrEmpty(searchTerm))
            statusService.StatusText = $"Searching for keyword: {searchTerm}...";
        searchService.SearchText = searchTerm;
    }

    private void ChangeGroupType(SearchQuery.GroupingType newType)
    {
        searchService.Grouping = newType;
        Logging.Log($"Grouping changed to {searchService.Grouping}");
        StateHasChanged();
    }

    private void ChangeSortOrder(SearchQuery.SortOrderType newType)
    {
        searchService.SortOrder = newType;
        Logging.Log($"Sort order changed to {searchService.SortOrder}");
        StateHasChanged();
    }
}
