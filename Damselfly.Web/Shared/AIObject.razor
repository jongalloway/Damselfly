
@inject SearchService searchService
@inject ImageRecognitionService aiService
@inject UserStatusService statusService;

<div class="object" title="@ObjectName" style="@ObjectStylePos" id="@theObject.PersonId">
    @if (Editing)
    {
    <div class="object-editor">
        <BlazoredTypeahead class="InputAddOn-field" SearchMethod="SearchNames" EnableDropDown="false"
                           placeholder="Enter a Name" Debounce="100" 
                           @bind-Value="@TypeAheadName" @onblur="@LostFocus">
            <SelectedTemplate>
                @{
                    UpdateName(context);
                }
            </SelectedTemplate>
            <ResultTemplate>
                @context
            </ResultTemplate>
            <NotFoundTemplate>
                @tagSearchText
            </NotFoundTemplate>
        </BlazoredTypeahead>
    </div>
    }
    else
    {
        <div class="object-text" @onclick="EditName" title="Click to Edit">@ObjectName</div>
    }
</div>

@code {
    [Parameter]
    public ImageObject theObject { get; set; }

    private bool Editing { get; set; }

    private string TypeAheadName { get; set; }
    private string tagSearchText { get; set; }

    public string ObjectName => theObject.ToString();
    public string ObjectTitle => $"{ObjectName} - click to edit";

    private string ObjectStylePos
    {
        get
        {
            int imgWidth = theObject.Image.MetaData.Width > 0 ? theObject.Image.MetaData.Width : 800;
            int imgHeight = theObject.Image.MetaData.Height > 0 ? theObject.Image.MetaData.Height : 800;

            int xPercent = (theObject.RectX * 100) / imgWidth;
            int yPercent = (theObject.RectY * 100) / imgHeight;
            int wPercent = (theObject.RectWidth * 100) / imgWidth;
            int hPercent = (theObject.RectHeight * 100) / imgHeight;
            var pos = $"top:{yPercent}%;left:{xPercent}%;width:{wPercent}%;height:{hPercent}%;";

            return pos;
        }
    }

    private void LostFocus()
    {
        Editing = false;
        StateHasChanged();
    }

    private void EditName()
    {
        if (!Editing && theObject.Type == ImageObject.ObjectTypes.Face.ToString())
        {
            Editing = true;
            StateHasChanged();
        }
    }

    private Task<IEnumerable<string>> SearchNames(string text)
    {
        var searchText = text.Trim();
        IEnumerable<string> results = new List<string>();

        // Store the search text which is used in the NotFound template
        tagSearchText = searchText;

        // Only query the DB if we have more than 2 chars.
        if (searchText.Length > 1)
        {
            // Union the search term with the results from the DB. Order them so that the
            // closest matches to the start of the string come first.
            var names = aiService.GetCachedPeople().Where(x => x.Name.StartsWith( searchText.Trim(), StringComparison.OrdinalIgnoreCase) )
                                               .Select( x => x.Name )
                                               .Distinct()
                                               .OrderBy(x => x.ToUpper().IndexOf(searchText.ToUpper()))
                                               .ThenBy(x => x, StringComparer.OrdinalIgnoreCase)
                                               .ToList();

            if (!names.Contains(searchText, StringComparer.OrdinalIgnoreCase))
                names.Insert(0, searchText);

            results = names;
        }

        return Task.FromResult( results );
    }

    private void UpdateName(string name)
    {
        if (!string.IsNullOrEmpty(name))
        {

            Logging.Log($"Saving name: {name}");
            TypeAheadName = null;
            StateHasChanged();

            using var db = new ImageContext();

            if (theObject.Person == null)
            {
                theObject.Person = new Person { Name = name };
                db.People.Add(theObject.Person);
                db.ImageObjects.Update(theObject);
            }
            else
            {
                // TODO: If this is an existing person/name, we might need to merge in Azure
                theObject.Person.Name = name;
                db.People.Update(theObject.Person);
            }

            db.SaveChanges("SetName");

            // TODO: Update the cache
            statusService.StatusText = $"Name saved as '{name}'";

            // Reset the tag
            Editing = false;

            StateHasChanged();
        }
    }
}
