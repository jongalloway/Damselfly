<!--
    Image preview panel - displays an image in full res. To keep the UX nice, the initial image
    is set to the medium thumb (which should load very quickly) and a hidden image loads the
    full-res version - which may need to be generated on the fly. Once that's loaded, the URL
    of the visible image is updated which should update it instantly.
-->

@using Microsoft.AspNetCore.Identity;
@using Damselfly.Core.DbModels

@inject IJSRuntime JsRuntime
@inject UserStatusService statusService
@inject UserConfigService userConfigService
@inject ContextMenuService contextMenuService
@inject UserManager<AppIdentityUser> UserManager;


@using Damselfly.Core.ImageProcessing
@using Damselfly.Core.Utils.Constants
@using Microsoft.EntityFrameworkCore

<div class="damselfly-imagepreview">
    <div class="damselfly-imagedisplay img-zoom-container" tabindex="0" @onkeydown="OnKeyDown"
         @oncontextmenu=@(args => ShowContextMenu(args)) @oncontextmenu:preventDefault="true">
        @if (ZoomEnabled)
        {
            <div @key="ZoomKey" class="img-zoom-result" id="zoomPane" />
        }
        <img @key="ImgKey" src="@ImageUrl" id="theImage" class="image-fill" />
        <div class="objects-box" id="objectBox">
            @if (ShowObjects)
            {
                @foreach (var obj in Objects)
                {
                    <AIObject theObject="@obj" />
                }
            }
        </div>
    </div>
</div>

<!-- Hidden image to background load the hi-res version-->
<img @key="ImgPreviewKey" src="@ImageUrlHighRes" @onload="ReplaceUrl" style="display:none">

@code
{
    [Parameter] // TODO Change to required with .Net 6 preview 6
    public Image Image { get { return theImage; } set { ChangeImage(value); } }

    [Parameter]
    public bool ShowObjects { get { return showObjects; } set { SetShowObjects(value); } }

    [Parameter]
    public bool ZoomEnabled { get { return zoomEnabled; } set { SetZoomEnabled(value); } }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private bool showObjects;
    private bool zoomEnabled;
    private Image theImage;

    private int ZoomLevel { get; set; } = 400;
    private string ImgKey => $"prev{theImage.ImageId}";
    private string ZoomKey => $"zoom{theImage.ImageId}";
    private string ImgPreviewKey => $"{theImage.ImageId}";
    private string ImageUrl { get; set; }
    private string ImageUrlHighRes => $"/thumb/{ThumbSize.ExtraLarge}/{theImage.ImageId}";
    private string ImageUrlZoom => GetZoomUrl(theImage);

    private readonly List<string> browserRenderedExtensions = new List<string> { ".jpg", ".jpeg", ".png", ".svg", ".webp", ".gif" };

    private IList<ImageObject> Objects { get { return theImage?.ImageObjects ?? new List<ImageObject>(); } }

    private bool HiResImageLoaded { get; set; }
    private string ShowObjectsMenuText => ShowObjects ? "Hide Objects/Faces" : "Show Objects/Faces";
    private string ShowZoomMenuText => ZoomEnabled ? "Hide Zoom" : "Show Zoom";

    /// <summary>
    /// Gets the URL for the zoomed image. If the original image can be rendered in the browser
    /// we just serve that. But if it's a file format that can't be rendered, we'll serve the
    /// XL thumbnail.
    /// </summary>
    /// <param name="image"></param>
    /// <returns></returns>
    private string GetZoomUrl(Image image)
    {
        var ext = Path.GetExtension(image.FileName);

        if (browserRenderedExtensions.Any(x => x.Equals(ext, StringComparison.OrdinalIgnoreCase)))
        {
            return $"/rawimage/{theImage.ImageId}";
        }
        else
        {
            // Browser can't render it, so return the JPG thumbnail
            return $"/thumb/{ThumbSize.ExtraLarge}/{theImage.ImageId}";
        }
    }
    void ShowContextMenu(MouseEventArgs args)
    {
        contextMenuService.Open(args,
        new List<ContextMenuItem>() {
                new ContextMenuItem(){ Text = ShowObjectsMenuText, Value = 0 },
                new ContextMenuItem(){ Text = ShowZoomMenuText, Value = 1 }
                }, (args) =>
                {
                    contextMenuService.Close();
                    switch (args.Value)
                    {
                        case 0: SetShowObjects(!ShowObjects); break;
                        case 1: SetZoomEnabled(!ZoomEnabled); break;
                    }
                });
    }

    private void DoObjectBox()
    {
        _ = InvokeAsync(async () =>
        {
            await JsRuntime.InvokeAsync<string>("ScaleToFitImage", "theImage", "objectBox");
            StateHasChanged();
        });
    }

    public void ToggleShowObjects()
    {
        SetShowObjects(!showObjects);
    }

    public void ToggleZoomEnabled()
    {
        SetZoomEnabled(!zoomEnabled);
    }

    private void SetShowObjects(bool newState)
    {
        if (newState == showObjects)
            return;

        showObjects = newState;
        userConfigService.Set(ConfigSettings.ShowObjects, showObjects.ToString());
        StateHasChanged();

        if (showObjects)
            DoObjectBox();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (showObjects)
                DoObjectBox();

            if (zoomEnabled && HiResImageLoaded)
            {
                await JsRuntime.InvokeAsync<string>("imageZoom", "theImage", ImageUrlZoom, "zoomPane", ZoomLevel);
            }
        }
    }

    private void SetZoomEnabled(bool newState)
    {
        if (newState != zoomEnabled)
        {
            zoomEnabled = newState;
            userConfigService.Set(ConfigSettings.ShowZoom, zoomEnabled.ToString());
            StateHasChanged();

            if (zoomEnabled)
            {
                _ = JsRuntime.InvokeAsync<string>("imageZoom", "theImage", ImageUrlZoom, "zoomPane", ZoomLevel);

                if (showObjects)
                    DoObjectBox();
            }
        }
    }

    private void ChangeImage(Image newImage)
    {
        if (newImage == null)
            throw new ArgumentException("Image cannot be null");

        if (theImage == null || theImage.ImageId != newImage.ImageId)
        {
            theImage = newImage;
            HiResImageLoaded = false;
            ImageUrl = $"/thumb/{ThumbSize.Medium}/{theImage.ImageId}";
            statusService.StatusText = "Loading hi-res image...";
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        ZoomLevel = userConfigService.GetInt(ConfigSettings.ZoomLevel, 400);
        ZoomEnabled = userConfigService.GetBool(ConfigSettings.ShowZoom, true);
        ShowObjects = userConfigService.GetBool(ConfigSettings.ShowObjects, false);

        base.OnInitialized();

    }

    protected void ReplaceUrl(ProgressEventArgs args)
    {
        ImageUrl = ImageUrlHighRes;

        HiResImageLoaded = true;

        if (zoomEnabled)
            _ = JsRuntime.InvokeAsync<string>("imageZoom", "theImage", ImageUrlZoom, "zoomPane", ZoomLevel);

        statusService.StatusText = "Hi-res image loaded.";
        StateHasChanged();

        DoObjectBox();

        // For when we want to do region selection
        //_ = JsRuntime.InvokeAsync<string>("DoCropSelection", "theImage");
    }

    void OnKeyDown(KeyboardEventArgs e)
    {
        if (zoomEnabled)
        {
            bool zoomChanged = false;
            if (e.Key == "ArrowUp")
            {
                ZoomLevel = Math.Min(ZoomLevel + 50, 400);
                zoomChanged = true;
            }
            else if (e.Key == "ArrowDown")
            {
                ZoomLevel = Math.Max(ZoomLevel - 50, 150);
                zoomChanged = true;
            }

            if (zoomChanged)
            {
                userConfigService.Set(ConfigSettings.ZoomLevel, ZoomLevel.ToString());
                _ = JsRuntime.InvokeAsync<string>("imageZoom", "theImage", ImageUrlZoom, "zoomPane", ZoomLevel);

                StateHasChanged();
                statusService.StatusText = $"Zoom level set to {ZoomLevel}%";
            }
        }
    }
}
