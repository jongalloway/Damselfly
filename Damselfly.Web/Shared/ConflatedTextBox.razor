@using Damselfly.Web.Data

<div class="InputAddOn">
    <div class="InputAddOn-item" title="@placeholder"><i class="fa @IconClass" /></div>
    <input class="InputAddOn-field" autocomplete="off" placeholder="@placeholder" id="@id" for="searchBox" @bind-value="ProxyValue" @bind-value:event="oninput" />
    <button class="InputAddOn-item" title="Clear Filter" @onclick="@(() => ClearText())"><i class="fa fa-times-circle" /></button>
</div>

@code {
    [Parameter]
    public string IconClass { get; set; }
    [Parameter]
    public Action<string> OnKeyPressed { get; set; }
    [Parameter]
    public Action<string> OnValueChanged { get; set; }
    [Parameter]
    public string placeholder { get; set; }
    [Parameter]
    public string id { get; set; }

    [Parameter]
    public string TextValue { set { HandleChange(value); } }

    bool initialValueSet = false;

    private EventConflator conflator = new EventConflator();
    private string tempValue;

    private void ClearText()
    {
        HandleChange(string.Empty);
    }

    // Used as a proxy to the underlying input box
    private string ProxyValue
    {
        get { return tempValue; } // TODO - don't think we need this
        set { HandleChange(value); }
    }

    private void HandleChange(string newValue)
    {
        if( tempValue != newValue )
        {
            if (OnKeyPressed != null)
                OnKeyPressed(newValue);

            tempValue = newValue;
            conflator.HandleEvent(SearchCallback);
        }
    }

    private void SearchCallback(object state)
    {
        if (OnValueChanged != null)
            OnValueChanged(tempValue);
    }
}
