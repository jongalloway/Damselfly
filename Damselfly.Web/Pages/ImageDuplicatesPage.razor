@page "/image/duplicates/{ImageID}"

@using System.Linq;
@using Microsoft.EntityFrameworkCore

@inject NavigationService navContext
@inject ViewDataService ViewDataService
@inject ImageCache imageCache

@using Damselfly.Core.ImageProcessing

<div class="damselfly-pagetitlebar">
    <NavBack />
    <div class="damselfly-imagetitle">
        <h4>
            Duplicate Images for @CurrentImage.FileName
        </h4>
    </div>
</div>
<div class="damselfly-export">

    @if (images != null)
    {
        @foreach (var img in images)
        {
            <div class="damselfly-exportitem">
                <div>
                    <img title="@img.Image.FileName" src="@img.ThumbURL" style="max-width:100px;">
                </div>
                <div>
                    @img.Image.FileName
                </div>
                <div>
                    @img.Image.Folder.Name
                </div>
            </div>

        }
    }
    else
    {
        <p>Loading selection...</p>
    }
</div>

@code {
    [Parameter]
    public string ImageID { get; set; }

    public Image CurrentImage { get; set; }

    readonly List<ListableImage> images = new List<ListableImage>();

    protected override async Task OnParametersSetAsync()
    {
        if (Int32.TryParse(ImageID, out var imageId))
        {
            CurrentImage = await imageCache.GetCachedImage(imageId);
            navContext.CurrentImage = CurrentImage;
        }
    }

    public async Task<List<Image>> GetImageDuplicates(Image image)
    {
        using var db = new ImageContext();
        var watch = new Stopwatch("GetImageDupes");

        var dupes = await db.ImageMetaData
                        .Where(x => x.Hash.Equals(image.MetaData.Hash) && x.ImageId != image.ImageId)
                        .Include(x => x.Image)
                        .Select(x => x.Image)
                        .ToListAsync();

        var cachedImages = await imageCache.EnrichAndCache(dupes);

        return cachedImages;
    }


    public async Task<List<ListableImage>> LoadData()
    {
        var watch = new Stopwatch("DupesLoadData");
        images.Clear();

        var dupeImages = await GetImageDuplicates(CurrentImage);

        var selectableImages = dupeImages.Select(x => new ListableImage(x, ThumbSize.Small));
        images.AddRange(selectableImages);
        watch.Stop();

        return images;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ViewDataService.SetSideBarState(new ViewDataService.SideBarState { ShowExport = true });

            await LoadData();

            StateHasChanged();
        }
    }

}
